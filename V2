/**
 * Code de la carte centrale
 * 
 * Fonctionnalités :
 *  - Récupérer les données de différents capteurs d'un même réseau Zigbee
 *  - Calculer ou recevoir les données complémentaires
 *  - Envoyer les données complètes au serveur via API
 *  
 *  Données reçues :
 *    - idCapteur
 *    - tauxCO2
 *    
 *  Données envoyées :
 *    - idBatiment
 *    - idCapteur
 *    - tauxCO2
 *    - heure
 */


// ----------------------------------------
//      Importations & Déclaration :
// ----------------------------------------
#include <Arduino.h>
#include <Wire.h>
#include <Ethernet.h>
#include <avr/sleep.h>
#include <Array.h>
#include <SPI.h>


/**
 * Mémoire Arduino Uno = 2k bytes (SRAM)
 * Array idCapteurs    = x * 4 bytes
 * Array tauxCO2       = x * 4 bytes
 * Array heure         = x * 20 bytes
 *  => Stockage max de environ 70 tuples de données
 *  => nb tuples choisi = 60 pour éviter une collision heap/stack
 */
 
#define ID_BATIMENT 22001
#define INPUT_SIZE 31
#define DATE_TIME_SIZE 20
#define NB_MAX_TUPLES 20

struct datetime {
  // date-time format : "yyyy-mm-dd hh:mm:ss"
  char value[DATE_TIME_SIZE];
};

// Variables locales
char receivedData[INPUT_SIZE+1];  // INPUT_SIZE+1 bytes
Array<int,      NB_MAX_TUPLES> idCapteur;
Array<float,    NB_MAX_TUPLES> tauxCO2;
Array<datetime, NB_MAX_TUPLES> heure;
int nbPaquetsNonEnvoyes;

//Variable locales pour la connexion ethernet : 
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
int    HTTP_PORT   = 80;
String POST="POST"; 
String GET="GET"; 
char   HOST_NAME[] = "sirgodfroy.alwaysdata.net";
String PATH_NAME_POST= "/api/api.php";
String PATH_NAME_GET="/api/date.php"; 
//String queryString = "?idBatiment=1&idCapteur=2&tauxCO2=400&heure=11:00";;
String date; 
EthernetClient client;

/**
 * Réalise la requete http POST via l'API. 
 */
  void HTTP_Request_POST(String queryString){
     if(client.connect(HOST_NAME, HTTP_PORT)) {
    // if connected:
    Serial.println("Connected to server");
    // make a HTTP request:
    // send HTTP header
    client.println(POST + " " + PATH_NAME_POST + " HTTP/1.1");
    client.println("Host: " + String(HOST_NAME));
    client.println("Connection: close");
    client.println(); // end HTTP header
    client.println(queryString);
    }
  }

 /**
   * Réalise la requête http GET via l'API
   */
   void HTTP_Request_GET(){
     if(client.connect(HOST_NAME, HTTP_PORT)) {
    // if connected:
    Serial.println("Connected to server");
    // make a HTTP request:
    // send HTTP header
    client.println(GET + " " + PATH_NAME_GET + " HTTP/1.1");
    client.println("Host: " + String(HOST_NAME));
    client.println("Connection: close");
    client.println(); // end HTTP header 
    }
   }
  

// ----------------------------------------
//                Fonctions
// ----------------------------------------
/** Envoie les données au serveur
 * "idBatiment" -> ID_BATIMENT (Carte)
 * "idCapteur"  -> idCapteur (Capteur)
 * "tauxCO2"    -> tauxCO2 (Capteur)
 * "heure"      -> heure (Serveur)
 */
void envoiServeur() {
  // Si l'heure a bien été reçue
  char* h = getServerTime();
  if (strcmp(h, "") != 0) {
    datetime dt;
    strcpy(dt.value, h);
    heure.push_back(dt);
  } else {
    // calculer le temps écoulé depuis le dernier temps reçu
    unsigned long timer = millis();
    datetime dt;
    itoa(timer, dt.value, 10); // <- à changer
    heure.push_back(dt);
  }
    String str = "?";
    str = str +"idBatiment="+ ID_BATIMENT + "&" +"idCapteurs"+ idCapteur.front() + "&"+"tauxCO2" + tauxCO2.front() + "&"+"heure" + heure.front().value;
    HTTP_Request_POST(str);
    idCapteur.remove(0);
    tauxCO2.remove(0);
    heure.remove(0);
    nbPaquetsNonEnvoyes--;
}


/** 
 *  Récupère le temps "yyyy-mm-dd hh:mm:ss" à partir du serveur
 */
char* getServerTime() {
  char* t = "";
  HTTP_Request_GET(); 
  t=getRequestInformation(); 
    return t;
}

 /**
  * Récupère les informations d'une requête http 1.1
  */
  char* getRequestInformation(){
        char* information=""; 
       while(client.connected()) {
      if(client.available()){
        // read an incoming byte from the server and print it to serial monitor:
        char c = client.read();
        information=information+c; 
      }
    }
    return information; 
  }

 



/**
 * Récuprère les données
 * Format:  "idCapteur;tauxCO2"
 */
void parseData() {
  // Premier champs : idCapteur (int)
  idCapteur.push_back(Serial.parseInt());
  
  // Deuxième champs : tauxCO2 (float)
  tauxCO2.push_back(Serial.parseFloat());
}



// ----------------------------------------
//            setup & loop :
// ----------------------------------------

void setup() {
  
  Serial.begin(9600);
  //set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  
  nbPaquetsNonEnvoyes = 0;
  
   if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to obtaining an IP address using DHCP");
    //while(true);
  }
  
}


void loop() {
  // Si un message est reçu :
  if(Serial.available() > 0) {
    parseData();    // Parse puis ajoute les données dans les Arrays correspondants
    nbPaquetsNonEnvoyes++;
    envoiServeur(); // Envoie les données au serveur
  }

  //sleep_mode();
}
